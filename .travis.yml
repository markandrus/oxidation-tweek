language: rust
sudo: false

cache:
  - $HOME/.cargo
  - $TRAVIS_BUILD_DIR/rust/target
  - $TRAVIS_BUILD_DIR/binaryen-$BINARYEN/bin

env:
  global:
    - BINARYEN=1.37.36

matrix:
  include:
    # NOTE(mroberts): https://github.com/rust-lang/rust/issues/49467
    # # Test
    # - rust: nightly
    #   before_install: |
    #     set -e
    #     rustup target add wasm32-unknown-unknown
    #     rustup target add x86_64-unknown-linux-musl
    #   script: PATH=binaryen-$BINARYEN/bin:$PATH TARGET=x86_64-unknown-linux-musl make test

    # WebAssembly
    - rust: nightly
      env: BUILD=release TARGET=wasm32-unknown-unknown
      before_install: rustup target add wasm32-unknown-unknown
      script: PATH=binaryen-$BINARYEN/bin:$PATH make test-js

    # Linux
    - rust: nightly
      env: BUILD=release TARGET=x86_64-unknown-linux-musl
      install: true
      before_install: rustup target add $TARGET
      script: make test-c

    # macOS
    - os: osx
      rust: nightly
      env: BUILD=release MACOSX_DEPLOYMENT_TARGET=10.7 TARGET=x86_64-apple-darwin
      install: true
      script: make test-c

before_script:
- |
  set -e

  cargo +nightly install clippy

  if [ -z "$TARGET" ] || [ "$TARGET" == wasm32-unknown-unknown ]; then
    cargo install wasm-bindgen-cli

    if [ "$BUILD" == release ]; then
      cargo install wasm-gc

      if [ ! -d binaryen-$BINARYEN/bin ]; then
        curl -OL https://github.com/WebAssembly/binaryen/archive/$BINARYEN.tar.gz
        tar -xf $BINARYEN.tar.gz
        cd binaryen-$BINARYEN
        cmake .
        make
        cd ..
      fi
    else
      cargo install cbindgen
    fi
  else
    cargo install cbindgen
  fi

install:
- |
  set -e

  if [ -z "$TARGET" ] || [ "$TARGET" == wasm32-unknown-unknown ]; then
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
    source ~/.nvm/nvm.sh
    nvm install 9
  fi

before_deploy:
- |
  set -e

  name="oxidation-tweek-$TRAVIS_TAG-$TARGET"
  mkdir $name

  if [ "$TARGET" == wasm32-unknown-unknown ]; then
    cp -R build/release/js/* $name/
  else
    cp target/$TARGET/release/liboxidation_tweek.a $name/
    cp README.md c/src/oxidation_tweek.h $name/
  fi

  tar czvf $name.tar.gz $name

deploy:
  api_key:
    secure: TODO
  file_glob: true
  file:
    - $name.tar.gz
  on:
    tags: true
  provider: releases
  skip_cleanup: true
